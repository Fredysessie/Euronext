content <- httr::content(response, "text", encoding = "UTF-8")
data <- jsonlite::fromJSON(content)
# Extract and return the ISIN
if (!is.null(data) && length(data) > 0) {
the_isin <- paste0(data$value[1], "-", data$mic[1])
return(the_isin)
} else {
return("ISIN not found")
}
} else {
# If the request was not successful, print a warning and return NULL
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
}
toupper('fiegd')
EN_GetISIN("bxbsb")
EN_GetISIN <- function(ticker) {
# Format the ticker to uppercase
ticker <- str_to_upper(ticker)
# Construct the URL for the API request
url <- paste0("https://live.euronext.com/en/instrumentSearch/searchJSON?q=", ticker)
# Make the fetch request
response <- httr::GET(url,
add_headers(
"accept" = "application/json, text/javascript, */*; q=0.01",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
),
# referrer = "https://live.euronext.com/en/search_instruments/us88554d2053?restMic",
referrerPolicy = "strict-origin-when-cross-origin"
)
# Check if the request was successful (status code 200)
if (status_code(response) == 200) {
# Parse the JSON content
content <- httr::content(response, "text", encoding = "UTF-8")
data <- jsonlite::fromJSON(content)
# Extract and return the ISIN
if (!is.null(data) && length(data) > 0) {
print(length(data))
the_isin <- paste0(data$value[1], "-", data$mic[1])
return(the_isin)
} else {
return("ISIN not found")
}
} else {
# If the request was not successful, print a warning and return NULL
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
}
EN_GetISIN("bxbsb")
EN_GetISIN <- function(ticker) {
# Format the ticker to uppercase
ticker <- str_to_upper(ticker)
# Construct the URL for the API request
url <- paste0("https://live.euronext.com/en/instrumentSearch/searchJSON?q=", ticker)
# Make the fetch request
response <- httr::GET(url,
add_headers(
"accept" = "application/json, text/javascript, */*; q=0.01",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
),
# referrer = "https://live.euronext.com/en/search_instruments/us88554d2053?restMic",
referrerPolicy = "strict-origin-when-cross-origin"
)
# Check if the request was successful (status code 200)
if (status_code(response) == 200) {
# Parse the JSON content
content <- httr::content(response, "text", encoding = "UTF-8")
data <- jsonlite::fromJSON(content)
# Extract and return the ISIN
if (!is.null(data) && length(data) > 0) {
# print(length(data))
print(data$value[1])
print(data$mic[1])
the_isin <- paste0(data$value[1], "-", data$mic[1])
return(the_isin)
} else {
return("ISIN not found")
}
} else {
# If the request was not successful, print a warning and return NULL
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
}
EN_GetISIN("bxbsb")
is.null("")
"" == ""
EN_GetISIN <- function(ticker) {
# Format the ticker to uppercase
ticker <- str_to_upper(ticker)
# Construct the URL for the API request
url <- paste0("https://live.euronext.com/en/instrumentSearch/searchJSON?q=", ticker)
# Make the fetch request
response <- httr::GET(url,
add_headers(
"accept" = "application/json, text/javascript, */*; q=0.01",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
),
# referrer = "https://live.euronext.com/en/search_instruments/us88554d2053?restMic",
referrerPolicy = "strict-origin-when-cross-origin"
)
# Check if the request was successful (status code 200)
if (status_code(response) == 200) {
# Parse the JSON content
content <- httr::content(response, "text", encoding = "UTF-8")
data <- jsonlite::fromJSON(content)
# Extract and return the ISIN
if (!is.null(data) && data$value[1] != "") {
# print(length(data))
print(data$value[1])
print(data$mic[1])
the_isin <- paste0(data$value[1], "-", data$mic[1])
return(the_isin)
} else {
return("ISIN not found")
}
} else {
# If the request was not successful, print a warning and return NULL
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
}
EN_GetISIN("bxbsb")
EN_GetISIN("BE0003837540")
EN_GetISIN <- function(ticker) {
# Format the ticker to uppercase
ticker <- str_to_upper(ticker)
# Construct the URL for the API request
url <- paste0("https://live.euronext.com/en/instrumentSearch/searchJSON?q=", ticker)
# Make the fetch request
response <- httr::GET(url,
add_headers(
"accept" = "application/json, text/javascript, */*; q=0.01",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
),
# referrer = "https://live.euronext.com/en/search_instruments/us88554d2053?restMic",
referrerPolicy = "strict-origin-when-cross-origin"
)
# Check if the request was successful (status code 200)
if (status_code(response) == 200) {
# Parse the JSON content
content <- httr::content(response, "text", encoding = "UTF-8")
data <- jsonlite::fromJSON(content)
# Extract and return the ISIN
if (!is.null(data) && data$value[1] != "") {
# print(length(data))
# print(data$value[1])
# print(data$mic[1])
the_isin <- paste0(data$value[1], "-", data$mic[1])
return(the_isin)
} else {
return("Ticker not found")
}
} else {
# If the request was not successful, print a warning and return NULL
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
}
EN_GetISIN("BE0003837540")
EN_HistData <- function(ticker,
from = Sys.Date() - 91,
to = Sys.Date() - 1) {
from <- as.Date(strftime(from, format="%Y-%m-%d"))
to <- as.Date(strftime(to, format="%Y-%m-%d"))
if (from > to){
rlang::abort(
"The 'from' parameter must be equal to or less than 'to' parameter"
)
}
ticker <- toupper(ticker)
the_adn <-  EN_GetISIN(ticker)
# if (the_adn == "Ticker not found"){
#   rlang::abort(
#     "The 'ticker' parameter cannot be blank. Please provide a good ticker"
#   )
# }
if (the_adn != "Ticker not found") {
# We can now start the code
url <- paste0("https://live.euronext.com/en/ajax/getHistoricalPricePopup/", the_adn)
headers <- c(
"accept" = "*/*",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"content-type" = "application/x-www-form-urlencoded; charset=UTF-8",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
)
params <- list(
"adjusted" = "Y",
"startdate" = from,
"enddate" = to,
"nbSession" = "10"
)
response <- POST(url, body = params, encode = "form")
# response <- httr::POST(url,
#                        headers = headers,
#                        body = params,
#                        # httr::add_headers(.headers = headers), httr::referrer(referrer),
#                        encode = "form")
# Check the response
if (status_code(response) == 200) {
# The status is 200
# Best methode to get the stock data
stock_data <- content(response, encoding = "UTF-8") %>%
rvest::html_nodes('table') %>%
rvest::html_table()
stock_data <- stock_data[[1]]
# Turn some columns to numeric value
stock_data$`Number of shares` <-  as.numeric(gsub(",", "", stock_data$`Number of shares`))
stock_data$Turnover <- as.numeric(gsub(",", "", stock_data$Turnover))
# Turn Date column to date format
stock_data$Date <- as.Date(stock_data$Date, format = "%d/%m/%Y")
return(stock_data)
} else {
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
} else {
return("Ticker not found")
}
}
EN_HistData("ABCA", from = "2023-10-30", to = "2024-01-27")
Sys.Date() - 365 * 2
"2021-01-29" > Sys.Date() - 365 * 2
"2021-01-29" < Sys.Date() - 365 * 2
EN_HistData <- function(ticker,
from = Sys.Date() - 91,
to = Sys.Date() - 1) {
from <- as.Date(strftime(from, format="%Y-%m-%d"))
to <- as.Date(strftime(to, format="%Y-%m-%d"))
if (from > to){
rlang::abort(
"The 'from' parameter must be equal to or less than 'to' parameter"
)
}
# Check if 'from' is less than 2 years ago
max_allowed_from <- Sys.Date() - 365 * 2
if (from < max_allowed_from) {
rlang::abort("Only dates not exceeding 2 years ago are allowed for the 'from' parameter.")
}
ticker <- toupper(ticker)
the_adn <-  EN_GetISIN(ticker)
# if (the_adn == "Ticker not found"){
#   rlang::abort(
#     "The 'ticker' parameter cannot be blank. Please provide a good ticker"
#   )
# }
if (the_adn != "Ticker not found") {
# We can now start the code
url <- paste0("https://live.euronext.com/en/ajax/getHistoricalPricePopup/", the_adn)
headers <- c(
"accept" = "*/*",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"content-type" = "application/x-www-form-urlencoded; charset=UTF-8",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
)
params <- list(
"adjusted" = "Y",
"startdate" = from,
"enddate" = to,
"nbSession" = "10"
)
response <- POST(url, body = params, encode = "form")
# response <- httr::POST(url,
#                        headers = headers,
#                        body = params,
#                        # httr::add_headers(.headers = headers), httr::referrer(referrer),
#                        encode = "form")
# Check the response
if (status_code(response) == 200) {
# The status is 200
# Best methode to get the stock data
stock_data <- content(response, encoding = "UTF-8") %>%
rvest::html_nodes('table') %>%
rvest::html_table()
stock_data <- stock_data[[1]]
# Turn some columns to numeric value
stock_data$`Number of shares` <-  as.numeric(gsub(",", "", stock_data$`Number of shares`))
stock_data$Turnover <- as.numeric(gsub(",", "", stock_data$Turnover))
# Turn Date column to date format
stock_data$Date <- as.Date(stock_data$Date, format = "%d/%m/%Y")
return(stock_data)
} else {
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
} else {
return("Ticker not found")
}
}
EN_HistData("ABCA", from = "2020-10-30", to = "2024-01-27")
EN_HistData("ABCAaaa", from = "2020-10-30", to = "2024-01-27")
EN_HistData("ABCAaaa", from = "2023-10-30", to = "2024-01-27")
# nbitems should be between 10 and 30
EN_intraday_Data <- function(ticker, type = "Today", nbitems = 30) {
type <- str_to_title(type)
today_types <- c('T', 'Today')
yesterday_types <- c('P', 'Previous')
date <- Sys.Date()
if (type %in% today_types) {
if(weekdays(date) == 'samedi'){
date <- Sys.Date()-1
} else if(weekdays(date) == 'dimanche'){
date <- Sys.Date()-2
} else {
date <- date
}
# Body of the request
body <- list(
"nbitems" = nbitems,
"date" = date,
"timezone" = 'CET')
} else if(type %in% yesterday_types){
if(weekdays(date) == 'samedi'){
date <- Sys.Date()-2
} else if(weekdays(date) == 'dimanche'){
date <- Sys.Date()-3
} else {
date <- Sys.Date() - 1
}
# print(date)
# Body of the request
body <- list(
"date" = date,
"nbitems" = 10
)
} else {
rlang::abort(
"Choose between 'T' and 'P' "
)
}
# date = Sys.Date()
ticker <- toupper(ticker)
the_adn <-  EN_GetISIN(ticker)
if (the_adn != "Ticker not found") {
# URL for the intraday data
url <- paste0("https://live.euronext.com/en/ajax/getIntradayPriceFilteredData/", the_adn)
# Headers for the request
headers <- list(
"accept" = "*/*",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"content-type" = "application/x-www-form-urlencoded; charset=UTF-8",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
)
# Referrer information
referrer <- paste0("https://live.euronext.com/en/product/equities/", the_adn)
# Make the fetch request
response <- httr::POST(url,
referrer = referrer,
body = body,
encode = "form")
if (status_code(response) == 200) {
# Parse the JSON content
content <- httr::content(response, "text", encoding = "UTF-8")
data <- jsonlite::fromJSON(content)
# Get the Data
data <- data$rows
# TUrn to title the column name
names(data) <- str_to_title(names(data))
return(data)
} else {
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
} else {
return("Ticker not found")
}
}
EN_intraday_Data("COVH", type = 'T', nbitems = 30)
EN_intraday_Data("COVH", type = 'Y', nbitems = 30)
EN_intraday_Data("COVH", type = 'P', nbitems = 30)
EN_intraday_Data("COVfsfH", type = 'T', nbitems = 30)
EN_Ticker_Perfomance <- function(ticker){
ticker <- toupper(ticker)
the_adn <-  EN_GetISIN(ticker)
if (the_adn != "Ticker not found") {
url <- paste0("https://live.euronext.com/en/ajax/getPerformancesExtended/", the_adn)
headers <- c(
accept = "*/*",
`accept-language` = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
`sec-fetch-dest` = "empty",
`sec-fetch-mode` = "cors",
`sec-fetch-site` = "same-origin",
`x-requested-with` = "XMLHttpRequest"
)
referrer <- paste0("https://live.euronext.com/en/product/equities/", the_adn)
response <- GET(url,
add_headers(.headers = headers),
referrer = referrer,
# set_cookies("your_cookie_name" = "your_cookie_value"),
# verbose(),
encode = "form"
)
if (status_code(response) == 200) {
# Best methode to get the historical performance data
histo_perf_data <- content(response, encoding = "UTF-8") %>%
rvest::html_nodes('table') %>%
rvest::html_table()
histo_perf_data <- histo_perf_data[[1]]
# Rename some cells elements
histo_perf_data[2,1] <- "Date of the highest"
histo_perf_data[4,1] <- "Date of the lowest"
# Turn "," to ""
histo_perf_data[7, ] <- lapply(histo_perf_data[7, ], function(x) gsub(",", "", x))
histo_perf_data[8, ] <- lapply(histo_perf_data[8, ], function(x) gsub(",", "", x))
histo_perf_data[9, ] <- lapply(histo_perf_data[9, ], function(x) gsub(",", "", x))
return(histo_perf_data)
} else {
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
} else {
return("Ticker not found")
}
}
EN_Ticker_Perfomance("ABca")
EN_Ticker_infos <- function(ticker){
ticker <- toupper(ticker)
the_adn <-  EN_GetISIN(ticker)
if (the_adn != "Ticker not found") {
url <- paste0("https://live.euronext.com/en/intraday_chart/getDetailedQuoteAjax/",
the_adn,
"/full")
response <- httr::GET(url,
headers = list(
"accept" = "*/*",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"if-none-match" = "\"d49f47bc\"",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
),
referrer = paste0("https://live.euronext.com/en/product/equities/", the_adn),
# referrerPolicy = "strict-origin-when-cross-origin",
# method = "GET",
# mode = "cors",
# credentials = "include"
)
if (status_code(response) == 200) {
# print("Statut ok")
# Best methode to get the ticker informations table
the_ticker_infos <- content(response, encoding = "UTF-8") %>%
rvest::html_nodes('table') %>%
rvest::html_table()
the_ticker_infos <- the_ticker_infos[[1]]
# Remove blank space
the_ticker_infos[11,2] = gsub("\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t", "      -      ", the_ticker_infos[11,2])
the_ticker_infos[13,2] = gsub("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "     -      ", the_ticker_infos[13,2])
return(the_ticker_infos)
} else {
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
} else {
return("Ticker not found")
}
}
EN_Ticker_infos("ABca")
ooook = EN_Ticker_infos("ABca")
dput(ooook$X1)
library(Euronext)
EN_Get_News("NL0000852564-XAMS", escape = T)
# Utiliser str_match pour capturer le contenu entre les balises
matched_markets <- str_match(les_markets, ">([^<]+)</div>")
