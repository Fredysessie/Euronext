names(Currency_rate) <- c("Instrument name", "Last price",  "Day change relative (%)")
Currency_rate$`Day change relative (%)` <- as.numeric(gsub("\n\t\t\t\t\t\t\t\t\t\t\t%", "", Currency_rate$`Day change relative (%)`))
Currency_rate$`Last price` <- as.numeric(gsub(",", "", Currency_rate$`Last price`))
}else{
Currency_rate <- NA
}
return(list(fr_indices = fr_indices,
EU_indices = EU_indices,
Currency_rate = Currency_rate))
}
# Initialize an empty data frame to store results
stock_choice = str_to_lower(stock_choice)
if( stock_choice %in%  c("a", "amsterdam")){
stock_choice = "amsterdam"
} else if( stock_choice %in% c("b", "brussels") ){
stock_choice = "brussels"
} else if( stock_choice %in% c("d", "dublin") ){
stock_choice = "dublin"
} else if( stock_choice %in% c("l", "lisbon") ){
stock_choice = "lisbon"
} else if( stock_choice %in% c("m", "milan") ){
stock_choice = "milan"
} else if( stock_choice %in% c("p", "paris")  ){
stock_choice = "paris"
} else if( stock_choice %in% c("o", "oslo") ){
stock_choice = "oslo"
} else {
rlang::abort(
"THe stock you've selected doesn't exist"
)
}
# URL de la requête
stock_url <- paste0("https://live.euronext.com/en/markets/", stock_choice)
# In cas currency rate is not existing
return(get_Stocks(stock_url))
}
# Amsterdam stock summary
En_Market.Sumarry("a")
En_Market.Sumarry <- function(stock_choice){
# Pour euronext
get_Stocks <- function(url){
webpage <- read_html(url)
# Extraire les données en utilisant les sélecteurs CSS
euro_infos <- webpage %>%
html_table()
# FRENCH INDICES
fr_indices <- euro_infos[[1]]
if(length(fr_indices)==3){
# We can format the first summary ie data1
names(fr_indices) <- c("Index", "Last price",  "Change (%)")
fr_indices$`Change (%)` <- as.numeric(gsub("\n\t\t\t\t\t\t\t\t\t\t\t%", "", fr_indices$`Change (%)`))
fr_indices$`Last price` <- as.numeric(gsub(",", "", fr_indices$`Last price`))
}else{
fr_indices <- NA
}
# EU INDICES
EU_indices <- euro_infos[[2]]
# length(EU_indices)==3
if(length(EU_indices)==3){
# We can format the second summary data ie data2
names(EU_indices) <- c("Instrument name", "Last price",  "Day change relative (%)")
EU_indices$`Day change relative (%)` <- as.numeric(gsub("\n\t\t\t\t\t\t\t\t\t\t\t%", "", EU_indices$`Day change relative (%)`))
EU_indices$`Last price` <- as.numeric(gsub(",", "", EU_indices$`Last price`))
}else{
EU_indices <- NA
}
# CURRENCY RATES
Currency_rate <- euro_infos[[3]]
# length(Currency_rate)==3
if(length(Currency_rate)==3){
# We can format the third summary data ie data3
names(Currency_rate) <- c("Instrument name", "Last price",  "Day change relative (%)")
Currency_rate$`Day change relative (%)` <- as.numeric(gsub("\n\t\t\t\t\t\t\t\t\t\t\t%", "", Currency_rate$`Day change relative (%)`))
Currency_rate$`Last price` <- as.numeric(gsub(",", "", Currency_rate$`Last price`))
}else{
Currency_rate <- NA
}
return(list(fr_indices = fr_indices,
EU_indices = EU_indices,
Currency_rate = Currency_rate))
}
# Initialize an empty data frame to store results
stock_choice = str_to_lower(stock_choice)
if( stock_choice %in%  c("a", "amsterdam")){
stock_choice = "amsterdam"
} else if( stock_choice %in% c("b", "brussels") ){
stock_choice = "brussels"
} else if( stock_choice %in% c("d", "dublin") ){
stock_choice = "dublin"
} else if( stock_choice %in% c("l", "lisbon") ){
stock_choice = "lisbon"
} else if( stock_choice %in% c("m", "milan") ){
stock_choice = "milan"
} else if( stock_choice %in% c("p", "paris")  ){
stock_choice = "paris"
} else if( stock_choice %in% c("o", "oslo") ){
stock_choice = "oslo"
} else {
rlang::abort(
"THe stock you've selected doesn't exist"
)
}
# URL de la requête
stock_url <- paste0("https://live.euronext.com/en/markets/", stock_choice)
# In cas currency rate is not existing
return(get_Stocks(stock_url))
}
# Amsterdam stock summary
En_Market.Sumarry("a")
# Brussels stock summary
# Adjust the code
En_Market.Sumarry("b")
# Dublin stock summary
En_Market.Sumarry("d")
# Lisbon stock summary
En_Market.Sumarry("l")
# Milan stock summary
En_Market.Sumarry("m")
# Paris stock summary
En_Market.Sumarry("p")
# Oslo stock summary
En_Market.Sumarry("o")
# Lisbon stock summary
En_Market.Sumarry("l")
# Lisbon stock summary
En_Market.Sumarry("l")$fr_indices
En_Market.Sumarry <- function(stock_choice){
# Pour euronext
get_Stocks <- function(url){
webpage <- read_html(url)
# Extraire les données en utilisant les sélecteurs CSS
euro_infos <- webpage %>%
html_table()
# FRENCH INDICES
indices_summary <- euro_infos[[1]]
if(length(indices_summary)==3){
# We can format the first summary ie data1
names(indices_summary) <- c("Index", "Last price",  "Change (%)")
indices_summary$`Change (%)` <- as.numeric(gsub("\n\t\t\t\t\t\t\t\t\t\t\t%", "", indices_summary$`Change (%)`))
indices_summary$`Last price` <- as.numeric(gsub(",", "", indices_summary$`Last price`))
}else{
indices_summary <- NA
}
# EU INDICES
EU_indices <- euro_infos[[2]]
# length(EU_indices)==3
if(length(EU_indices)==3){
# We can format the second summary data ie data2
names(EU_indices) <- c("Instrument name", "Last price",  "Day change relative (%)")
EU_indices$`Day change relative (%)` <- as.numeric(gsub("\n\t\t\t\t\t\t\t\t\t\t\t%", "", EU_indices$`Day change relative (%)`))
EU_indices$`Last price` <- as.numeric(gsub(",", "", EU_indices$`Last price`))
}else{
EU_indices <- NA
}
# CURRENCY RATES
Currency_rate <- euro_infos[[3]]
# length(Currency_rate)==3
if(length(Currency_rate)==3){
# We can format the third summary data ie data3
names(Currency_rate) <- c("Instrument name", "Last price",  "Day change relative (%)")
Currency_rate$`Day change relative (%)` <- as.numeric(gsub("\n\t\t\t\t\t\t\t\t\t\t\t%", "", Currency_rate$`Day change relative (%)`))
Currency_rate$`Last price` <- as.numeric(gsub(",", "", Currency_rate$`Last price`))
}else{
Currency_rate <- NA
}
return(list(indices_summary = indices_summary,
EU_indices = EU_indices,
Currency_rate = Currency_rate))
}
# Initialize an empty data frame to store results
stock_choice = str_to_lower(stock_choice)
if( stock_choice %in%  c("a", "amsterdam")){
stock_choice = "amsterdam"
} else if( stock_choice %in% c("b", "brussels") ){
stock_choice = "brussels"
} else if( stock_choice %in% c("d", "dublin") ){
stock_choice = "dublin"
} else if( stock_choice %in% c("l", "lisbon") ){
stock_choice = "lisbon"
} else if( stock_choice %in% c("m", "milan") ){
stock_choice = "milan"
} else if( stock_choice %in% c("p", "paris")  ){
stock_choice = "paris"
} else if( stock_choice %in% c("o", "oslo") ){
stock_choice = "oslo"
} else {
rlang::abort(
"THe stock you've selected doesn't exist"
)
}
# URL de la requête
stock_url <- paste0("https://live.euronext.com/en/markets/", stock_choice)
# In cas currency rate is not existing
return(get_Stocks(stock_url))
}
# Amsterdam stock summary
En_Market.Sumarry("a")
# Lisbon stock summary
En_Market.Sumarry("l")$fr_indices
En_Market.Sumarry <- function(stock_choice){
# Pour euronext
get_Stocks <- function(url){
webpage <- read_html(url)
# Extraire les données en utilisant les sélecteurs CSS
euro_infos <- webpage %>%
html_table()
# FRENCH INDICES
Indices_summary <- euro_infos[[1]]
if(length(Indices_summary)==3){
# We can format the first summary ie data1
names(Indices_summary) <- c("Index", "Last price",  "Change (%)")
Indices_summary$`Change (%)` <- as.numeric(gsub("\n\t\t\t\t\t\t\t\t\t\t\t%", "", Indices_summary$`Change (%)`))
Indices_summary$`Last price` <- as.numeric(gsub(",", "", Indices_summary$`Last price`))
}else{
Indices_summary <- NA
}
# EU INDICES
EU_indices <- euro_infos[[2]]
# length(EU_indices)==3
if(length(EU_indices)==3){
# We can format the second summary data ie data2
names(EU_indices) <- c("Instrument name", "Last price",  "Day change relative (%)")
EU_indices$`Day change relative (%)` <- as.numeric(gsub("\n\t\t\t\t\t\t\t\t\t\t\t%", "", EU_indices$`Day change relative (%)`))
EU_indices$`Last price` <- as.numeric(gsub(",", "", EU_indices$`Last price`))
}else{
EU_indices <- NA
}
# CURRENCY RATES
Currency_rate <- euro_infos[[3]]
# length(Currency_rate)==3
if(length(Currency_rate)==3){
# We can format the third summary data ie data3
names(Currency_rate) <- c("Instrument name", "Last price",  "Day change relative (%)")
Currency_rate$`Day change relative (%)` <- as.numeric(gsub("\n\t\t\t\t\t\t\t\t\t\t\t%", "", Currency_rate$`Day change relative (%)`))
Currency_rate$`Last price` <- as.numeric(gsub(",", "", Currency_rate$`Last price`))
}else{
Currency_rate <- NA
}
return(list(Indices_summary = Indices_summary,
EU_indices = EU_indices,
Currency_rate = Currency_rate))
}
# Initialize an empty data frame to store results
stock_choice = str_to_lower(stock_choice)
if( stock_choice %in%  c("a", "amsterdam")){
stock_choice = "amsterdam"
} else if( stock_choice %in% c("b", "brussels") ){
stock_choice = "brussels"
} else if( stock_choice %in% c("d", "dublin") ){
stock_choice = "dublin"
} else if( stock_choice %in% c("l", "lisbon") ){
stock_choice = "lisbon"
} else if( stock_choice %in% c("m", "milan") ){
stock_choice = "milan"
} else if( stock_choice %in% c("p", "paris")  ){
stock_choice = "paris"
} else if( stock_choice %in% c("o", "oslo") ){
stock_choice = "oslo"
} else {
rlang::abort(
"THe stock you've selected doesn't exist"
)
}
# URL de la requête
stock_url <- paste0("https://live.euronext.com/en/markets/", stock_choice)
# In cas currency rate is not existing
return(get_Stocks(stock_url))
}
# Lisbon stock summary
En_Market.Sumarry("l")$fr_indices
# Lisbon stock summary
En_Market.Sumarry("l")$Indices_summary
print("summary data for 'Amsterdam stock indices'")
print("Summary data for 'Currency rate'")
library(Euronext)
url <- 'https://live.euronext.com/en/popout-page/getTopPerformers'
page <- read_html(url)
options <- page %>%
html_node("#awl_top_performers_belongs_to") %>%
html_nodes("option") %>%
html_attr("value")
print(options)
# Define the URL and request parameters
url <- "https://live.euronext.com/en/ajax/getTopPerformersPopup/MostActive?a=true&tp_type=STOCK"
body <- list(
since = "Yesterday",
market = "Amsterdam",
capitalization = "",
belongs_to = "All",
eligibility = "All",
icb_sector = ""
)
# Make the POST request
response <- POST(url, body = body, encode = "form")
http_status(response)$status_type
status_code(response)
# Parse the JSON response
json_response <- content(response, "text")
parsed_response <- fromJSON(json_response)
library(jsonlite)
parsed_response <- fromJSON(json_response)
View(body)
page <- read_html(response)
View(page)
# Extract the option values from the select element
options <- page %>%
html_node("#awl_top_performers_belongs_to") %>%
html_nodes("option") %>%
html_attr("value")
options
# Lire le contenu de la réponse
content <- httr::content(response, "text", encoding = "UTF-8")
# Read the HTML content of the page
page <- read_html(content)
# Extract the option values from the select element
options <- page %>%
html_node("#awl_top_performers_belongs_to") %>%
html_nodes("option") %>%
html_attr("value")
options
# Make the POST request
response <- GET(url, body = body, encode = "form")
# Lire le contenu de la réponse
content <- httr::content(response, "text", encoding = "UTF-8")
# Extract the option values from the select element
options <- content %>%
html_node("#awl_top_performers_belongs_to") %>%
html_nodes("option") %>%
html_attr("value")
# Read the HTML content of the page
page <- read_html(content)
# Extract the option values from the select element
options <- page %>%
html_node("#awl_top_performers_belongs_to") %>%
html_nodes("option") %>%
html_attr("value")
options
# Make the POST request
response <- POST(url, body = body, encode = "form")
page_content <- content(response, "text")
page <- read_html(page_content)
options <- page %>%
html_nodes("#awl_top_performers_belongs_to option") %>%
html_attr("value")
options
options <- page %>%
html_nodes("#awl_top_performers_belongs_to") %>%
html_attr("value")
options
# Define the URL and request parameters
url <- "https://live.euronext.com/en/ajax/getTopPerformersPopup/MostActive?a=true&tp_type=STOCK"
body <- list(
since = "Yesterday",
market = "Amsterdam",
capitalization = "",
belongs_to = "All",
eligibility = "All",
icb_sector = ""
)
# Make the POST request
response <- POST(url, body = body, encode = "form")
# Extract the HTML content from the response
page_content <- content(response, "text", encoding = "UTF-8")
# Parse the HTML content
page <- read_html(page_content)
page
page %>%
html_node("#awl_top_performers_belongs_to") %>%
html_nodes("option") %>%
html_attr("value")
page %>%
html_node(".reset-to-first form-control") %>%
html_nodes("option") %>%
html_attr("value")
page %>%
html_node(".reset-to-first form-control") %>%
html_attr("value")
page %>%
html_node("#awl_top_performers_belongs_to") %>%
html_attr("value")
page %>%
html_nodes("#awl_top_performers_belongs_to") %>%
html_attr("value")
page %>%
html_node("#awl_top_performers_filter > div:nth-child(4) > div") %>%
html_nodes("option") %>%
html_attr("value")
page %>%
html_node("#awl_top_performers_filter > div:nth-child(4) > div") %>%
html_nodes("option") %>%
html_attr("value")
View(page)
html_structure(page)
library(xml2)
html_structure(page)
html_structure(page)
page %>%
html_node("#awl_top_performers_filter > div:nth-child(4) > div")
page %>%
html_node("#awl_top_performers_belongs_to")
page %>%
html_nodes("#awl_top_performers_belongs_to")
# Read the HTML content of the page
page <- read_html(url)
url
page %>%
html_node("#awl_top_performers_belongs_to") %>%
html_nodes("option") %>%
html_attr("value")
######
url <- 'https://live.euronext.com/en/popout-page/getTopPerformers'
# Read the HTML content of the page
page <- read_html(url)
page
page %>%
html_node("#awl_top_performers_belongs_to") %>%
html_nodes("option") %>%
html_attr("value")
res<- POST("https://live.euronext.com/en/ajax/getTopPerformersPopup/MostActive?a=true&tp_type=STOCK",body = list(
since = "Yesterday",
market = "Amsterdam",
capitalization = "",
belongs_to = "All",
eligibility = "All",
icb_sector = ""
),encode = "form")
content(res, encoding = "UTF-8") %>%
html_node("#awl_top_performers_belongs_to") %>%
html_nodes("option") %>%
html_attr("value")
content(res, encoding = "UTF-8") %>%
html_node("#awl_top_performers_belongs_to") %>%
html_nodes("option") %>%
html_attr("value")
library(RSelenium)
usethis::use_cran_comments()
devtools::submit_cran()
devtools::check(remote = TRUE, manual = TRUE)
library(Euronext)
devtools::check_win_devel()
rhub::check_for_cran()
devtools::submit_cran()
library(Euronext)
library(Euronext)
devtools::submit_cran()
library(devtools)
devtools::submit_cran()
library(Euronext)
library(highcharter)
library(lubridate)
library(rlang)
library(httr)
library(httr2)
library(xml2)
library(dplyr)
library(stringr)
library(xts)
library(flextable)
library(grDevices)
library(data.table)
library(rvest)
library(jsonlite)
devtools::submit_cran()
set_config(use_proxy(url="10.3.100.207",port=8080))
devtools::submit_cran()
library(Euronext)
library(highcharter)
library(lubridate)
library(rlang)
library(httr)
library(httr2)
library(dplyr)
library(rvest)
library(stringr)
library(magrittr)
library(xts)
library(flextable)
library(devtools)
library(grDevices)
library(data.table)
devtools::submit_cran()
devtools::submit_cran()
library(Euronext)
library(highcharter)
library(lubridate)
library(rlang)
library(httr)
library(httr2)
library(dplyr)
library(rvest)
library(stringr)
library(magrittr)
library(xts)
library(flextable)
library(devtools)
library(grDevices)
library(data.table)
devtools::submit_cran()
library(curl)
devtools::submit_cran()
set_config(use_proxy(url="10.3.100.207",port=8080))
devtools::submit_cran()
library(curl)
remove.packages("rsconnect")
devtools::submit_cran()
remotes::install_version("rsconnect", version = "0.8.29")
devtools::submit_cran()
devtools::submit_cran()
C:\Users\[your user]\AppData\Local\RStudio\sources
gwd()
getwd()
devtools::submit_cran()
