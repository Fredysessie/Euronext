rlang::abort(
"The 'from' parameter must be equal to or less than 'to' parameter"
)
}
ticker = unique(toupper(ticker))
# Check if ticker is a list
if (length(ticker) > 1) {
# Verify each ticker in the list
available_tickers <- c()
invalid_tickers <- c()
for (elm in ticker) {
test_tickers <- EN_GetISIN_bis(elm)
# if (test_tickers != "Ticker not found") {
if (length(test_tickers) == 4) {
test_tickers = test_tickers$Symbol
available_tickers  <- c( test_tickers, available_tickers)
}else{
invalid_tickers <- c(elm, invalid_tickers)
}
}
# if (length(ticker) ==length(available_tickers)) {
#   ticker <- available_tickers
# }
# available_tickers <- EN_GetISIN_bis()$Ticker
# invalid_tickers <- ticker[!(ticker %in% available_tickers)]
if (length(invalid_tickers) > 0) {
rlang::abort(paste("The following tickers are not found:", paste(invalid_tickers, collapse = ", ")))
}
ticker <- available_tickers
print(ticker)
# Proceed with data retrieval for valid tickers
combined_data <- as.data.frame(matrix(NA, ncol = 4, nrow = 0))
names(combined_data) <- c("Date", "Price", "Volume", "Ticker")
# print(length(combined_data))
for (element in ticker) {
temp_data <- Ready.HcData.func(element, from = from, to = to, stock_type = stock_type, escape = escape)
if ("Volume" %in% names(temp_data)) {
temp_data$Ticker <- element
}else{
temp_data$Volume  <- NA
temp_data$Ticker <- element
}
# print(length(temp_data))
# print(names(temp_data))
combined_data <- rbind(combined_data, temp_data)
}
# data_list <- lapply(ticker, function(tick) {
#   temp_data <- Ready.HcData.func(tick, from = from, to = to, stock_type = stock_type, escape = escape)
#   temp_data$Ticker <- tick
#   return(temp_data)
# })
# Combine the data frames
# combined_data <- do.call(rbind, data_list)
combined_data$Price = as.numeric(gsub(',|-',"", combined_data$Price))
combined_data$Volume = as.numeric(gsub(',|-',"", combined_data$Volume))
return(combined_data)
} else {
combined_data <- Ready.HcData.func(element, from = from, to = to, stock_type = stock_type, escape = escape)
# If data is NULL, return error message
if (combined_data == "Ticker not found") {
error_msg <- paste("Ticker", ticker, "not found")
return(list(error = error_msg, data = NULL))
} else {
# Otherwise, return the data
return(combined_data)
}
return(combined_data)
}
}
ls()
rm("EN_Ticker_hcData",     "EN_Ticker_hcData_bis")
EN_Ticker_hcData<- function(ticker, from = NULL, to = Sys.Date(), stock_type = 'Eq_Ind', escape = F) {
Ready.HcData.func <- function(ticker, escape = F, stock_type = 'Eq_Ind', from = NULL, to = Sys.Date()){
if (is.null(from)) {
from <- as.Date("1970-01-01")  # Set a default value
} else {
from <- as.Date(strftime(from, format="%Y-%m-%d"))
}
# if (is.null(to)) {
#   to <- Sys.Date()
# } else {
to <- as.Date(strftime(to, format="%Y-%m-%d"))
# }
# if (!is.null(from)) {
#   if (!is.Date(from) || !is.Date(to)) {
#     rlang::abort("Both 'from' and 'to' must be of type Date.")
#   }
# }
if (from > to){
rlang::abort(
"The 'from' parameter must be equal to or less than 'to' parameter"
)
}
# Test if escape is True or False
if (escape %in% c(T, F)) {
if(escape == T){
the_adn <- toupper(ticker)
# We can directly start
# Mettre tout le code ici
url <- paste0("https://live.euronext.com/intraday_chart/getChartData/",
the_adn,
"/max")
response <- httr::GET(url,
# referrer = paste0("https://live.euronext.com/en/product/equities/",
#                   the_adn),
headers = list(
"accept" = "*/*",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"if-none-match" = "\"d49f47bc\"",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
)
# referrerPolicy = "strict-origin-when-cross-origin",
# method = "GET",
# mode = "cors",
# credentials = "include"
)
if (status_code(response) == 200) {
# print("Statut ok")
# Best methode to get the ticker informations table
content <- httr::content(response, "text", encoding = "UTF-8")
data <- jsonlite::fromJSON(content)
data$time <- as.Date(data$time)
names(data) <- c("Date", "Price", "Volume")
data <- dplyr::as_tibble(data) %>%
dplyr::filter(Date >= from) %>%
dplyr::filter(Date <= to)
return(data)
} else {
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
}else {
# In case escape is False
ticker <- toupper(ticker)
if(stock_type %in% c('Fund', "F")){
the_adn <-  EN_GetISIN_F(ticker)
} else if(stock_type %in% c('Bond', "B")){
the_adn <-  EN_GetISIN_B(ticker)
} else if(stock_type %in% c('Etfs', "E")){
the_adn <-  EN_GetISIN_Etf(ticker)
} else if(stock_type == 'Eq_Ind'){
the_adn <-  EN_GetISIN(ticker)
} else{
rlang::abort(
"Only parameters such us 'Eq_Ind' for Stocks and Indexes, 'Fund' or 'F' for Fund tickers, 'Bond' or 'B' for Bond tickers, and 'Etfs' or 'E' for EFTs are allowed."
)
}
# Mettre tout le code ici
if (the_adn != "Ticker not found") {
url <- paste0("https://live.euronext.com/intraday_chart/getChartData/",
the_adn,
"/max")
response <- httr::GET(url,
headers = list(
"accept" = "*/*",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"if-none-match" = "\"d49f47bc\"",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
),
referrer = paste0("https://live.euronext.com/en/product/equities/", the_adn),
# referrerPolicy = "strict-origin-when-cross-origin",
# method = "GET",
# mode = "cors",
# credentials = "include"
)
if (status_code(response) == 200) {
# print("Statut ok")
# Best methode to get the ticker informations table
content <- httr::content(response, "text", encoding = "UTF-8")
data <- jsonlite::fromJSON(content)
data$time <- as.Date(data$time)
names(data) <- c("Date", "Price", "Volume")
data <- dplyr::as_tibble(data) %>%
dplyr::filter(Date >= from) %>%
dplyr::filter(Date <= to)
return(data)
} else {
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
} else {
return("Ticker not found")
}
# In case escape is False
}
} else{
rlang::abort(
"Only parameters T or F are allowed"
)
}
}
# Add EN_Ticker_hcData function
# Créer une fonction pour récupérer les données historiques pour un seul ticker
# Ready.HcData.func <- function(tick, from, to, stock_type, escape) {
#   # Appeler EN_Ticker_hcData pour un seul ticker
#   temp_data <- EN_Ticker_hcData(tick, from = from, to = to, stock_type = stock_type, escape = escape)
#   # Ajouter la colonne Ticker au résultat
#   # temp_data$Ticker <- tick
#   return(temp_data)
# }
# End of EN_Ticker_hcData function
####
from <- as.Date(strftime(from, format="%Y-%m-%d"))
to <- as.Date(strftime(to, format="%Y-%m-%d"))
if (from > to){
rlang::abort(
"The 'from' parameter must be equal to or less than 'to' parameter"
)
}
ticker = unique(toupper(ticker))
# Check if ticker is a list
if (length(ticker) > 1) {
# Verify each ticker in the list
available_tickers <- c()
invalid_tickers <- c()
for (elm in ticker) {
test_tickers <- EN_GetISIN_bis(elm)
# if (test_tickers != "Ticker not found") {
if (length(test_tickers) == 4) {
test_tickers = test_tickers$Symbol
available_tickers  <- c( test_tickers, available_tickers)
}else{
invalid_tickers <- c(elm, invalid_tickers)
}
}
# if (length(ticker) ==length(available_tickers)) {
#   ticker <- available_tickers
# }
# available_tickers <- EN_GetISIN_bis()$Ticker
# invalid_tickers <- ticker[!(ticker %in% available_tickers)]
if (length(invalid_tickers) > 0) {
rlang::abort(paste("The following tickers are not found:", paste(invalid_tickers, collapse = ", ")))
}
ticker <- available_tickers
print(ticker)
# Proceed with data retrieval for valid tickers
combined_data <- as.data.frame(matrix(NA, ncol = 4, nrow = 0))
names(combined_data) <- c("Date", "Price", "Volume", "Ticker")
# print(length(combined_data))
for (element in ticker) {
temp_data <- Ready.HcData.func(element, from = from, to = to, stock_type = stock_type, escape = escape)
if ("Volume" %in% names(temp_data)) {
temp_data$Ticker <- element
}else{
temp_data$Volume  <- NA
temp_data$Ticker <- element
}
# print(length(temp_data))
# print(names(temp_data))
combined_data <- rbind(combined_data, temp_data)
}
# data_list <- lapply(ticker, function(tick) {
#   temp_data <- Ready.HcData.func(tick, from = from, to = to, stock_type = stock_type, escape = escape)
#   temp_data$Ticker <- tick
#   return(temp_data)
# })
# Combine the data frames
# combined_data <- do.call(rbind, data_list)
combined_data$Price = as.numeric(gsub(',|-',"", combined_data$Price))
combined_data$Volume = as.numeric(gsub(',|-',"", combined_data$Volume))
return(combined_data)
} else {
combined_data <- Ready.HcData.func(element, from = from, to = to, stock_type = stock_type, escape = escape)
# If data is NULL, return error message
if (combined_data == "Ticker not found") {
error_msg <- paste("Ticker", ticker, "not found")
return(list(error = error_msg, data = NULL))
} else {
# Otherwise, return the data
return(combined_data)
}
return(combined_data)
}
}
dtaaaa = EN_Ticker_hcData_bis(c("ABca", "4DDD", "ADOBE", "ALFEN BEHEER", "1GOOGL"))
rm("EN_Ticker_hcData")
EN_Ticker_hcData<- function(ticker, from = NULL, to = Sys.Date(), stock_type = 'Eq_Ind', escape = F) {
Ready.HcData.func <- function(ticker, escape = F, stock_type = 'Eq_Ind', from = NULL, to = Sys.Date()){
if (is.null(from)) {
from <- as.Date("1970-01-01")  # Set a default value
} else {
from <- as.Date(strftime(from, format="%Y-%m-%d"))
}
# if (is.null(to)) {
#   to <- Sys.Date()
# } else {
to <- as.Date(strftime(to, format="%Y-%m-%d"))
# }
# if (!is.null(from)) {
#   if (!is.Date(from) || !is.Date(to)) {
#     rlang::abort("Both 'from' and 'to' must be of type Date.")
#   }
# }
if (from > to){
rlang::abort(
"The 'from' parameter must be equal to or less than 'to' parameter"
)
}
# Test if escape is True or False
if (escape %in% c(T, F)) {
if(escape == T){
the_adn <- toupper(ticker)
# We can directly start
# Mettre tout le code ici
url <- paste0("https://live.euronext.com/intraday_chart/getChartData/",
the_adn,
"/max")
response <- httr::GET(url,
# referrer = paste0("https://live.euronext.com/en/product/equities/",
#                   the_adn),
headers = list(
"accept" = "*/*",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"if-none-match" = "\"d49f47bc\"",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
)
# referrerPolicy = "strict-origin-when-cross-origin",
# method = "GET",
# mode = "cors",
# credentials = "include"
)
if (status_code(response) == 200) {
# print("Statut ok")
# Best methode to get the ticker informations table
content <- httr::content(response, "text", encoding = "UTF-8")
data <- jsonlite::fromJSON(content)
data$time <- as.Date(data$time)
names(data) <- c("Date", "Price", "Volume")
data <- dplyr::as_tibble(data) %>%
dplyr::filter(Date >= from) %>%
dplyr::filter(Date <= to)
return(data)
} else {
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
}else {
# In case escape is False
ticker <- toupper(ticker)
if(stock_type %in% c('Fund', "F")){
the_adn <-  EN_GetISIN_F(ticker)
} else if(stock_type %in% c('Bond', "B")){
the_adn <-  EN_GetISIN_B(ticker)
} else if(stock_type %in% c('Etfs', "E")){
the_adn <-  EN_GetISIN_Etf(ticker)
} else if(stock_type == 'Eq_Ind'){
the_adn <-  EN_GetISIN(ticker)
} else{
rlang::abort(
"Only parameters such us 'Eq_Ind' for Stocks and Indexes, 'Fund' or 'F' for Fund tickers, 'Bond' or 'B' for Bond tickers, and 'Etfs' or 'E' for EFTs are allowed."
)
}
# Mettre tout le code ici
if (the_adn != "Ticker not found") {
url <- paste0("https://live.euronext.com/intraday_chart/getChartData/",
the_adn,
"/max")
response <- httr::GET(url,
headers = list(
"accept" = "*/*",
"accept-language" = "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",
"if-none-match" = "\"d49f47bc\"",
"sec-ch-ua" = "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "cors",
"sec-fetch-site" = "same-origin",
"x-requested-with" = "XMLHttpRequest"
),
referrer = paste0("https://live.euronext.com/en/product/equities/", the_adn),
# referrerPolicy = "strict-origin-when-cross-origin",
# method = "GET",
# mode = "cors",
# credentials = "include"
)
if (status_code(response) == 200) {
# print("Statut ok")
# Best methode to get the ticker informations table
content <- httr::content(response, "text", encoding = "UTF-8")
data <- jsonlite::fromJSON(content)
data$time <- as.Date(data$time)
names(data) <- c("Date", "Price", "Volume")
data <- dplyr::as_tibble(data) %>%
dplyr::filter(Date >= from) %>%
dplyr::filter(Date <= to)
return(data)
} else {
warning("Error fetching data. HTTP status code: ", status_code(response))
return(NULL)
}
} else {
return("Ticker not found")
}
# In case escape is False
}
} else{
rlang::abort(
"Only parameters T or F are allowed"
)
}
}
# Add EN_Ticker_hcData function
# Créer une fonction pour récupérer les données historiques pour un seul ticker
# Ready.HcData.func <- function(tick, from, to, stock_type, escape) {
#   # Appeler EN_Ticker_hcData pour un seul ticker
#   temp_data <- EN_Ticker_hcData(tick, from = from, to = to, stock_type = stock_type, escape = escape)
#   # Ajouter la colonne Ticker au résultat
#   # temp_data$Ticker <- tick
#   return(temp_data)
# }
# End of EN_Ticker_hcData function
####
from <- as.Date(strftime(from, format="%Y-%m-%d"))
to <- as.Date(strftime(to, format="%Y-%m-%d"))
if (from > to){
rlang::abort(
"The 'from' parameter must be equal to or less than 'to' parameter"
)
}
ticker = unique(toupper(ticker))
# Check if ticker is a list
if (length(ticker) > 1) {
# Verify each ticker in the list
available_tickers <- c()
invalid_tickers <- c()
for (elm in ticker) {
test_tickers <- EN_GetISIN_bis(elm)
# if (test_tickers != "Ticker not found") {
if (length(test_tickers) == 4) {
test_tickers = test_tickers$Symbol
available_tickers  <- c( test_tickers, available_tickers)
}else{
invalid_tickers <- c(elm, invalid_tickers)
}
}
# if (length(ticker) ==length(available_tickers)) {
#   ticker <- available_tickers
# }
# available_tickers <- EN_GetISIN_bis()$Ticker
# invalid_tickers <- ticker[!(ticker %in% available_tickers)]
if (length(invalid_tickers) > 0) {
rlang::abort(paste("The following tickers are not found:", paste(invalid_tickers, collapse = ", ")))
}
ticker <- available_tickers
print(ticker)
# Proceed with data retrieval for valid tickers
combined_data <- as.data.frame(matrix(NA, ncol = 4, nrow = 0))
names(combined_data) <- c("Date", "Price", "Volume", "Ticker")
# print(length(combined_data))
for (element in ticker) {
temp_data <- Ready.HcData.func(element, from = from, to = to, stock_type = stock_type, escape = escape)
if ("Volume" %in% names(temp_data)) {
temp_data$Ticker <- element
}else{
temp_data$Volume  <- NA
temp_data$Ticker <- element
}
# print(length(temp_data))
# print(names(temp_data))
combined_data <- rbind(combined_data, temp_data)
}
# data_list <- lapply(ticker, function(tick) {
#   temp_data <- Ready.HcData.func(tick, from = from, to = to, stock_type = stock_type, escape = escape)
#   temp_data$Ticker <- tick
#   return(temp_data)
# })
# Combine the data frames
# combined_data <- do.call(rbind, data_list)
combined_data$Price = as.numeric(gsub(',|-',"", combined_data$Price))
combined_data$Volume = as.numeric(gsub(',|-',"", combined_data$Volume))
return(combined_data)
} else {
combined_data <- Ready.HcData.func(element, from = from, to = to, stock_type = stock_type, escape = escape)
# If data is NULL, return error message
if (combined_data == "Ticker not found") {
error_msg <- paste("Ticker", ticker, "not found")
return(list(error = error_msg, data = NULL))
} else {
# Otherwise, return the data
return(combined_data)
}
return(combined_data)
}
}
dtaaaa = EN_Ticker_hcData(c("ABca", "4DDD", "ADOBE", "ALFEN BEHEER", "1GOOGL"))
head(dtaaaa)
fffff= 4
dtaaaa = EN_Ticker_hcData(c("ABca", "4DDD", "ADOBE", "ALFEN BEHEER", "1GOOGL"))
library(Euronext)
rm(EN_Ticker_hcData)
rm(fffff)
dtaaaa = EN_Ticker_hcData(c("ABca", "4DDD", "ADOBE", "ALFEN BEHEER", "1GOOGL"))
dtaaaa
